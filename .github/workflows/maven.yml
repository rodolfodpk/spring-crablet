name: Java 25 CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_DB: crablet
          POSTGRES_USER: crablet
          POSTGRES_PASSWORD: crablet
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 25 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'  # Caches ~/.m2/repository

      - name: Build with Maven
        run: mvn -B clean install --file pom.xml

      - name: Generate JaCoCo Coverage Report
        run: mvn -B jacoco:report-aggregate --file pom.xml

      - name: Display Coverage Summary
        if: always()
        run: |
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "target/site/jacoco-aggregate/jacoco.xml" ]; then
              python3 << 'EOF'
          import xml.etree.ElementTree as ET
          import sys
          
          try:
              # Parse the JaCoCo aggregated report
              tree = ET.parse('target/site/jacoco-aggregate/jacoco.xml')
              root = tree.getroot()
              
              # Get overall line coverage
              line_counters = root.findall('.//counter[@type="LINE"]')
              if line_counters:
                  last_counter = line_counters[-1]
                  missed = int(last_counter.get('missed', 0))
                  covered = int(last_counter.get('covered', 0))
                  total = missed + covered
                  line_coverage = (covered / total) * 100 if total > 0 else 0
                  
                  print(f"üìä Line Coverage: {line_coverage:.2f}%")
                  print(f"   (covered: {covered}, missed: {missed})")
              
              # Get overall branch coverage
              branch_counters = root.findall('.//counter[@type="BRANCH"]')
              if branch_counters:
                  last_branch = branch_counters[-1]
                  branch_missed = int(last_branch.get('missed', 0))
                  branch_covered = int(last_branch.get('covered', 0))
                  branch_total = branch_missed + branch_covered
                  branch_coverage = (branch_covered / branch_total) * 100 if branch_total > 0 else 0
                  
                  print(f"üåø Branch Coverage: {branch_coverage:.2f}%")
                  print(f"   (covered: {branch_covered}, missed: {branch_missed})")
                  
          except Exception as e:
              print(f"Error parsing coverage: {e}")
              sys.exit(1)
          EOF
          else
              echo "‚ö†Ô∏è Coverage report not found"
          fi
