name: Java 25 CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_DB: crablet
          POSTGRES_USER: crablet
          POSTGRES_PASSWORD: crablet
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 25 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '25'
          cache: 'maven'  # Caches ~/.m2/repository

      - name: Build with Maven
        run: mvn -B clean install --file pom.xml

      - name: Generate JaCoCo Coverage Report
        run: mvn -B jacoco:report-aggregate --file pom.xml

      - name: Generate Coverage Badges
        if: github.ref == 'refs/heads/main'
        run: |
          # Create badges directory if it doesn't exist
          mkdir -p .github/badges
          
          # Parse JaCoCo XML report using Python (more reliable than grep)
          python3 << 'EOF'
          import xml.etree.ElementTree as ET
          import urllib.request
          
          try:
              # Parse the JaCoCo aggregated report
              tree = ET.parse('target/site/jacoco-aggregate/jacoco.xml')
              root = tree.getroot()
              
              # Get overall line coverage
              line_counters = root.findall('.//counter[@type="LINE"]')
              if line_counters:
                  last_counter = line_counters[-1]
                  missed = int(last_counter.get('missed', 0))
                  covered = int(last_counter.get('covered', 0))
                  total = missed + covered
                  line_coverage = int((covered / total) * 100) if total > 0 else 0
                  
                  # Determine badge color
                  if line_coverage >= 90:
                      color = "brightgreen"
                  elif line_coverage >= 80:
                      color = "green"
                  elif line_coverage >= 70:
                      color = "yellowgreen"
                  elif line_coverage >= 60:
                      color = "yellow"
                  else:
                      color = "red"
                  
                  # Download coverage badge
                  urllib.request.urlretrieve(
                      f"https://img.shields.io/badge/coverage-{line_coverage}%25-{color}",
                      ".github/badges/jacoco.svg"
                  )
                  print(f"Generated coverage badge: {line_coverage}%")
              
              # Get overall branch coverage
              branch_counters = root.findall('.//counter[@type="BRANCH"]')
              if branch_counters:
                  last_branch = branch_counters[-1]
                  branch_missed = int(last_branch.get('missed', 0))
                  branch_covered = int(last_branch.get('covered', 0))
                  branch_total = branch_missed + branch_covered
                  branch_coverage = int((branch_covered / branch_total) * 100) if branch_total > 0 else 0
                  
                  # Determine badge color
                  if branch_coverage >= 90:
                      branch_color = "brightgreen"
                  elif branch_coverage >= 80:
                      branch_color = "green"
                  elif branch_coverage >= 70:
                      branch_color = "yellowgreen"
                  elif branch_coverage >= 60:
                      branch_color = "yellow"
                  else:
                      branch_color = "red"
                  
                  # Download branch coverage badge
                  urllib.request.urlretrieve(
                      f"https://img.shields.io/badge/branches-{branch_coverage}%25-{branch_color}",
                      ".github/badges/branches.svg"
                  )
                  print(f"Generated branch coverage badge: {branch_coverage}%")
              else:
                  print("No branch coverage data found")
                  
          except Exception as e:
              print(f"Error generating badges: {e}")
              exit(1)
          EOF

      - name: Commit Coverage Badges
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/badges/
          git diff --staged --quiet || git commit -m "Update coverage badges [skip ci]"
          git push
